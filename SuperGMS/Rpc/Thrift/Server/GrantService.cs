#pragma warning disable   // Using directives should be ordered alphabetically by namespace

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 *  这个文件是thrift工具生成的csharp代理，不要改动
 */

using System;
using System.Collections.Generic;

using System.Text;

using System.IO;
using Thrift;
using Thrift.Protocol;
using Thrift.Transport;
using SuperGMS.Log;
using Microsoft.Extensions.Logging;

namespace SuperGMS.Rpc.Thrift.Server
{
    public partial class GrantService
    {
        public class Client : IDisposable, Iface
        {
            private readonly static ILogger logger = LogFactory.CreateLogger<Client>();
            public Client(TProtocol prot) : this(prot, prot)
            {
            }

            public Client(TProtocol iprot, TProtocol oprot)
            {
                iprot_ = iprot;
                oprot_ = oprot;
            }

            protected TProtocol iprot_;
            protected TProtocol oprot_;
            protected int seqid_;

            public TProtocol InputProtocol
            {
                get { return iprot_; }
            }

            public TProtocol OutputProtocol
            {
                get { return oprot_; }
            }

            #region " IDisposable Support "

            private bool _IsDisposed;

            // IDisposable
            public void Dispose()
            {
                Dispose(true);
            }

            protected virtual void Dispose(bool disposing)
            {
                if (!_IsDisposed)
                {
                    if (disposing)
                    {
                        if (iprot_ != null)
                        {
                            ((IDisposable)iprot_).Dispose();
                        }
                        if (oprot_ != null)
                        {
                            ((IDisposable)oprot_).Dispose();
                        }
                    }
                }
                _IsDisposed = true;
            }

            #endregion " IDisposable Support "

#if SILVERLIGHT
      public IAsyncResult Begin_Send(AsyncCallback callback, object state, string my_args)
      {
        return send_Send(callback, state, my_args);
      }

      public string End_Send(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Send();
      }

#endif

            public string Send(string my_args, object appContext)
            {
#if !SILVERLIGHT
                send_Send(my_args);
                return recv_Send();

#else
        var asyncResult = Begin_Send(null, null, my_args);
        return End_Send(asyncResult);

#endif
            }

#if SILVERLIGHT
      public IAsyncResult send_Send(AsyncCallback callback, object state, string my_args)
#else

            public void send_Send(string my_args)
#endif
            {
                oprot_.WriteMessageBegin(new TMessage("Send", TMessageType.Call, seqid_));
                Send_args args = new Send_args();
                args.My_args = my_args;
                args.Write(oprot_);
                oprot_.WriteMessageEnd();
#if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
#else
                oprot_.Transport.Flush();
#endif
            }

            public string recv_Send()
            {
                TMessage msg = iprot_.ReadMessageBegin();
                if (msg.Type == TMessageType.Exception)
                {
                    TApplicationException x = TApplicationException.Read(iprot_);
                    iprot_.ReadMessageEnd();
                    logger.LogError(x, "GrantService.recv_Send.Error");
                    return null;
                }
                Send_result result = new Send_result();
                result.Read(iprot_);
                iprot_.ReadMessageEnd();
                if (result.__isset.success)
                {
                    return result.Success;
                }
                logger.LogError(new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Send failed: unknown result"), "Send failed: unknown result");
                return null;
            }
        }

        public class Processor : TProcessor
        {
            public Processor(ISync iface)
            {
                iface_ = iface;
                processMap_["Send"] = Send_Process;
            }

            protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
            private readonly static ILogger logger = LogFactory.CreateLogger<Processor>();
            private ISync iface_;
            protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

            public bool Process(TProtocol iprot, TProtocol oprot)
            {
                try
                {
                    TMessage msg = iprot.ReadMessageBegin();
                    ProcessFunction fn;
                    processMap_.TryGetValue(msg.Name, out fn);
                    if (fn == null)
                    {
                        TProtocolUtil.Skip(iprot, TType.Struct);
                        iprot.ReadMessageEnd();
                        TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
                        oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
                        x.Write(oprot);
                        oprot.WriteMessageEnd();
                        oprot.Transport.Flush();
                        return true;
                    }
                    fn(msg.SeqID, iprot, oprot);
                }
                catch (IOException)
                {
                    return false;
                }
                return true;
            }

            public void Send_Process(int seqid, TProtocol iprot, TProtocol oprot)
            {
                Send_args args = new Send_args();
                args.Read(iprot);
                iprot.ReadMessageEnd();
                Send_result result = new Send_result();
                try
                {
                    TSocket t = (TSocket)iprot.Transport;
                    result.Success = iface_.Send(args.My_args, t.TcpClient.Client.RemoteEndPoint.ToString());
                    oprot.WriteMessageBegin(new TMessage("Send", TMessageType.Reply, seqid));
                    result.Write(oprot);
                }
                catch (TTransportException ttx)
                {
                    logger.LogError(ttx, "GrantService.Send_Process.ttx.Error");
                }
                catch (Exception ex)
                {
                    logger.LogError(ex, "GrantService.Send_Process.ex.Error");
                    TApplicationException x = new TApplicationException(TApplicationException.ExceptionType.InternalError, " Internal error.");
                    oprot.WriteMessageBegin(new TMessage("Send", TMessageType.Exception, seqid));
                    x.Write(oprot);
                }
                oprot.WriteMessageEnd();
                oprot.Transport.Flush();
            }
        }

#if !SILVERLIGHT

        [Serializable]
#endif
        public partial class Send_args : TBase
        {
            private string _my_args;

            public string My_args
            {
                get
                {
                    return _my_args;
                }
                set
                {
                    __isset.my_args = true;
                    this._my_args = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

            [Serializable]
#endif
            public struct Isset
            {
                public bool my_args;
            }

            public Send_args()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 1:
                                if (field.Type == TType.String)
                                {
                                    My_args = iprot.ReadString();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;

                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("Send_args");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();
                    if (My_args != null && __isset.my_args)
                    {
                        field.Name = "my_args";
                        field.Type = TType.String;
                        field.ID = 1;
                        oprot.WriteFieldBegin(field);
                        oprot.WriteString(My_args);
                        oprot.WriteFieldEnd();
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("Send_args(");
                bool __first = true;
                if (My_args != null && __isset.my_args)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("My_args: ");
                    __sb.Append(My_args);
                }
                __sb.Append(")");
                return __sb.ToString();
            }
        }

#if !SILVERLIGHT

        [Serializable]
#endif
        public partial class Send_result : TBase
        {
            private string _success;

            public string Success
            {
                get
                {
                    return _success;
                }
                set
                {
                    __isset.success = true;
                    this._success = value;
                }
            }

            public Isset __isset;
#if !SILVERLIGHT

            [Serializable]
#endif
            public struct Isset
            {
                public bool success;
            }

            public Send_result()
            {
            }

            public void Read(TProtocol iprot)
            {
                iprot.IncrementRecursionDepth();
                try
                {
                    TField field;
                    iprot.ReadStructBegin();
                    while (true)
                    {
                        field = iprot.ReadFieldBegin();
                        if (field.Type == TType.Stop)
                        {
                            break;
                        }
                        switch (field.ID)
                        {
                            case 0:
                                if (field.Type == TType.String)
                                {
                                    Success = iprot.ReadString();
                                }
                                else
                                {
                                    TProtocolUtil.Skip(iprot, field.Type);
                                }
                                break;

                            default:
                                TProtocolUtil.Skip(iprot, field.Type);
                                break;
                        }
                        iprot.ReadFieldEnd();
                    }
                    iprot.ReadStructEnd();
                }
                finally
                {
                    iprot.DecrementRecursionDepth();
                }
            }

            public void Write(TProtocol oprot)
            {
                oprot.IncrementRecursionDepth();
                try
                {
                    TStruct struc = new TStruct("Send_result");
                    oprot.WriteStructBegin(struc);
                    TField field = new TField();

                    if (this.__isset.success)
                    {
                        if (Success != null)
                        {
                            field.Name = "Success";
                            field.Type = TType.String;
                            field.ID = 0;
                            oprot.WriteFieldBegin(field);
                            oprot.WriteString(Success);
                            oprot.WriteFieldEnd();
                        }
                    }
                    oprot.WriteFieldStop();
                    oprot.WriteStructEnd();
                }
                finally
                {
                    oprot.DecrementRecursionDepth();
                }
            }

            public override string ToString()
            {
                StringBuilder __sb = new StringBuilder("Send_result(");
                bool __first = true;
                if (Success != null && __isset.success)
                {
                    if (!__first) { __sb.Append(", "); }
                    __first = false;
                    __sb.Append("Success: ");
                    __sb.Append(Success);
                }
                __sb.Append(")");
                return __sb.ToString();
            }
        }
    }
}

#pragma warning restore // Using directives should be ordered alphabetically by namespace